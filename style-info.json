{"colors":{"bg-gray-900":"bg-gray-900","from-green-900":"from-green-900","to-green-700":"to-green-700","text-green-400":"text-green-400","text-green-200":"text-green-200","text-gray-300":"text-gray-300","bg-green-500":"bg-green-500","bg-green-700":"bg-green-700","bg-gray-800":"bg-gray-800","text-green-500":"text-green-500","text-gray-700":"text-gray-700","bg-gray-700":"bg-gray-700","text-green-300":"text-green-300","text-gray-400":"text-gray-400","bg-green-600":"bg-green-600","bg-green-900":"bg-green-900","bg-green-800":"bg-green-800","text-green-100":"text-green-100"},"navHtml":"<nav class=\"relative z-10 py-6\">\n      <div class=\"container mx-auto px-6\">\n        <div class=\"flex items-center justify-between\">\n          <div class=\"text-xl font-semibold text-white\">\n            <a href=\"#\" class=\"text-green-400 hover:text-green-200\">Cyberhunt</a>\n          </div>\n          <div class=\"hidden md:flex space-x-6\">\n            <a href=\"#\" class=\"hover:text-green-200\">About</a>\n            <a href=\"#\" class=\"hover:text-green-200\">Services</a>\n            <a href=\"#\" class=\"hover:text-green-200\">Solutions</a>\n            <a href=\"#\" class=\"hover:text-green-200\">Contact</a>\n          </div>\n          <div class=\"md:hidden\">\n            <button id=\"mobile-menu-button\" class=\"text-white focus:outline-none focus:text-green-200\">\n              <svg class=\"h-6 w-6\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\n                <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M4 6h16M4 12h16M4 18h16\"></path>\n              </svg>\n            </button>\n          </div>\n        </div>\n      </div>\n      <!-- Mobile Menu (Hidden by default) -->\n      <div class=\"md:hidden hidden\" id=\"mobile-menu\">\n        <div class=\"px-4 py-2 space-y-2\">\n          <a href=\"#\" class=\"block hover:text-green-200\">About</a>\n          <a href=\"#\" class=\"block hover:text-green-200\">Services</a>\n          <a href=\"#\" class=\"block hover:text-green-200\">Solutions</a>\n          <a href=\"#\" class=\"block hover:text-green-200\">Contact</a>\n        </div>\n      </div>\n    </nav>","footerHtml":"<footer class=\"bg-gray-800 py-12 md:py-16 lg:py-20\">\n        <div class=\"container mx-auto px-4\">\n            <div class=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8\">\n                <div>\n                    <h3 class=\"text-xl font-semibold mb-4 text-green-300\">Cyberhunt</h3>\n                    <p class=\"text-gray-400 leading-relaxed\">\n                        Pioneering blockchain solutions for a secure and transparent future.\n                    </p>\n                    <div class=\"flex space-x-4 mt-4\">\n                        <a href=\"#\" class=\"text-gray-400 hover:text-green-300 transition duration-300\">\n                            <svg class=\"h-6 w-6\" fill=\"currentColor\" viewBox=\"0 0 24 24\" aria-hidden=\"true\">\n                                <path fill-rule=\"evenodd\" d=\"M22 12c0-5.523-4.477-10-10-10S2 6.477 2 12c0 4.991 3.663 9.15 8.431 9.806v-7.299H6.924v-2.706h2.507v-1.927c0-2.216.666-3.485 3.593-3.485.981 0 1.951.138 2.216.165v2.451h-1.511c-1.048 0-1.264.807\n\n<!-- SERVICES SECTION -->\n<section id=\" services\"=\"\" class=\"bg-gray-900 text-white py-20 overflow-hidden\">\n    </path></svg></a><div class=\"container mx-auto px-4\"><a href=\"#\" class=\"text-gray-400 hover:text-green-300 transition duration-300\">\n        <div class=\"text-center mb-16\" data-animate=\"fade-in\">\n            <h2 class=\"text-4xl font-extrabold text-green-400 mb-4\">Our Blockchain Solutions</h2>\n            <p class=\"text-lg text-gray-300\">Empowering businesses with innovative and secure blockchain technology.</p>\n        </div>\n\n        </a><div class=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\"><a href=\"#\" class=\"text-gray-400 hover:text-green-300 transition duration-300\">\n\n            <!-- Service 1 -->\n            </a><div class=\"bg-gray-800 rounded-xl shadow-lg overflow-hidden hover:shadow-2xl transition-shadow duration-300\" data-animate=\"slide-in-left\"><a href=\"#\" class=\"text-gray-400 hover:text-green-300 transition duration-300\">\n                </a><div class=\"p-6\"><a href=\"#\" class=\"text-gray-400 hover:text-green-300 transition duration-300\">\n                    <div class=\"flex items-center justify-center h-16 w-16 rounded-full bg-green-600 text-white mb-4\">\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke-width=\"1.5\" stroke=\"currentColor\" class=\"w-8 h-8\">\n                            <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M2.25 18L9 11.25l4.5 4.5L21.75 6M2.25 6l18 12M3 2.25h1.5m13.5 0h1.5m-15 0l2.25 2.25M21 2.25l-2.25 2.25M3 19.5h1.5m13.5 0h1.5m-15 0l2.25-2.25M21 19.5l-2.25-2.25\"></path>\n                        </svg>\n                    </div>\n                    <h3 class=\"text-2xl font-semibold mb-2 text-green-300\">Decentralized Application (DApp) Development</h3>\n                    <p class=\"text-gray-400\">We build secure and scalable DApps tailored to your specific business needs, leveraging the power of blockchain technology.</p>\n                    <ul class=\"list-disc list-inside mt-4 text-sm text-gray-400\">\n                        <li>Smart Contract Development</li>\n                        <li>UI/UX Design</li>\n                        <li>Blockchain Integration</li>\n                        <li>Testing and Auditing</li>\n                    </ul>\n                    </a><a href=\"#\" class=\"inline-block mt-4 bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded-lg transition-colors duration-200\">Learn More</a>\n                </div>\n            </div>\n\n            <!-- Service 2 -->\n            <div class=\"bg-gray-800 rounded-xl shadow-lg overflow-hidden hover:shadow-2xl transition-shadow duration-300\" data-animate=\"slide-in-up\">\n                <div class=\"p-6\">\n                    <div class=\"flex items-center justify-center h-16 w-16 rounded-full bg-green-600 text-white mb-4\">\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke-width=\"1.5\" stroke=\"currentColor\" class=\"w-8 h-8\">\n                            <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M16.5 10.5V6.75a3 3 0 00-3-3H7.5a3 3 0 00-3 3v10.5a3 3 0 003 3h8.25a3 3 0 003-3v-3.75m-9.375.75h1.5m-1.5 1.5h1.5m-1.5 3h1.5m-3-6h.375m-3 6h.375m-3-6h.375m-3 6h.375\"></path>\n                        </svg>\n                    </div>\n                    <h3 class=\"text-2xl font-semibold mb-2 text-green-300\">Smart Contract Auditing &amp; Security</h3>\n                    <p class=\"text-gray-400\">Ensure the integrity and security of your smart contracts with our comprehensive auditing services.</p>\n                    <ul class=\"list-disc list-inside mt-4 text-sm text-gray-400\">\n                        <li>Vulnerability Assessment</li>\n                        <li>Code Review</li>\n                        <li>Gas Optimization</li>\n                        <li>Formal Verification</li>\n                    </ul>\n                    <a href=\"#\" class=\"inline-block mt-4 bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded-lg transition-colors duration-200\">Learn More</a>\n                </div>\n            </div>\n\n            <!-- Service 3 -->\n            <div class=\"bg-gray-800 rounded-xl shadow-lg overflow-hidden hover:shadow-2xl transition-shadow duration-300\" data-animate=\"slide-in-right\">\n                <div class=\"p-6\">\n                    <div class=\"flex items-center justify-center h-16 w-16 rounded-full bg-green-600 text-white mb-4\">\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke-width=\"1.5\" stroke=\"currentColor\" class=\"w-8 h-8\">\n                            <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M12 21a9.004 9.004 0 008.716-4.037m-7.328 2.73a11.07 11.07 0 000 3.294m1.311 1.018l-1.07-1.019a11.071 11.071 0 00-3.294 0c.159.403.405.76.78 1.082l1.07 1.019m-1.07-1.019c.548.919 1.164 1.71 1.846 2.372l1.07 1.019m-1.724-1.175l1.724 1.175M4.5 6.364l1.091-1.091M19.5 6.364l-1.091-1.091M4.5 17.636l1.091 1.091M19.5 17.636l-1.091 1.091\"></path>\n                        </svg>\n\n                    </div>\n                    <h3 class=\"text-2xl font-semibold mb-2 text-green-300\">Blockchain Consulting</h3>\n                    <p class=\"text-gray-400\">Expert guidance on integrating blockchain solutions into your existing business infrastructure.</p>\n                    <ul class=\"list-disc list-inside mt-4 text-sm text-gray-400\">\n                        <li>Strategy Development</li>\n                        <li>Technology Selection</li>\n                        <li>Implementation Planning</li>\n                        <li>Training &amp; Support</li>\n                    </ul>\n                    <a href=\"#\" class=\"inline-block mt-4 bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded-lg transition-colors duration-200\">Learn More</a>\n                </div>\n            </div>\n\n            <!-- Service 4 -->\n            <div class=\"bg-gray-800 rounded-xl shadow-lg overflow-hidden hover:shadow-2xl transition-shadow duration-300 md:col-span-2\" data-animate=\"slide-in-left\">\n                <div class=\"p-6\">\n                    <div class=\"flex items-center justify-center h-16 w-16 rounded-full bg-green-600 text-white mb-4\">\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke-width=\"1.5\" stroke=\"currentColor\" class=\"w-8 h-8\">\n                            <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M9 12.75L11.25 15 15 9.75M21 12a9 9 0 11-18 0 9 9 0 0118 0z\"></path>\n                        </svg>\n                    </div>\n                    <h3 class=\"text-2xl font-semibold mb-2 text-green-300\">Custom Blockchain Development</h3>\n                    <p class=\"text-gray-400\">Tailored blockchain solutions designed to meet your unique business requirements. From private blockchains to consortium networks, we've got you covered.</p>\n                    <ul class=\"list-disc list-inside mt-4 text-sm text-gray-400\">\n                        <li>Private Blockchain Development</li>\n                        <li>Consortium Blockchain Development</li>\n                        <li>Hybrid Blockchain Development</li>\n                        <li>Tokenization Services</li>\n                    </ul>\n                    <a href=\"#\" class=\"inline-block mt-4 bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded-lg transition-colors duration-200\">Learn More</a>\n                </div>\n            </div>\n\n            <!-- Service 5 -->\n            <div class=\"bg-gray-800 rounded-xl shadow-lg overflow-hidden hover:shadow-2xl transition-shadow duration-300 lg:col-span-1\" data-animate=\"slide-in-right\">\n                <div class=\"p-6\">\n                    <div class=\"flex items-center justify-center h-16 w-16 rounded-full bg-green-600 text-white mb-4\">\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke-width=\"1.5\" stroke=\"currentColor\" class=\"w-8 h-8\">\n                            <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M17.25 6.75L22.5 12l-5.25 5.25m-10.5 0L1.5 12l5.25-5.25m7.5-3l-4.5 16.5\"></path>\n                        </svg>\n                    </div>\n                    <h3 class=\"text-2xl font-semibold mb-2 text-green-300\">Blockchain Integration</h3>\n                    <p class=\"text-gray-400\">Seamlessly integrate blockchain technology into your existing systems and workflows to improve efficiency and transparency.</p>\n                    <ul class=\"list-disc list-inside mt-4 text-sm text-gray-400\">\n                        <li>API Integration</li>\n                        <li>Legacy System Integration</li>\n                        <li>Data Migration</li>\n                        <li>Workflow Automation</li>\n                    </ul>\n                    <a href=\"#\" class=\"inline-block mt-4 bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded-lg transition-colors duration-200\">Learn More</a>\n                </div>\n            </div>\n\n        </div>\n    </div>\n</div></div></div></div></footer>","styleBlock":"\n        body{font-family:'Manrope', system-ui, sans-serif;overflow-x:hidden;width:100%;max-width:100%;margin:0;padding:0}\n        h1,h2,h3,h4,h5,h6{font-family:'Manrope', sans-serif}\n        section,header,footer{width:100vw;max-width:100%;overflow-x:hidden}\n        header{background-size:cover;background-position:center;background-repeat:no-repeat;position:relative}\n        [data-animate]{opacity:0;transform:translateY(20px);transition:opacity .7s ease-out,transform .7s ease-out}[data-animate].visible{opacity:1;transform:translateY(0)}[data-animate=\"stagger\"]>*{opacity:0;transform:translateY(15px);transition:opacity .5s,transform .5s;transition-delay:calc(var(--child-index,0)*.1s)}[data-animate=\"stagger\"].visible>*{opacity:1;transform:translateY(0)}\n        .nav-fixed{position:fixed;top:0;left:0;right:0;z-index:50;background:rgba(255,255,255,.9);backdrop-filter:blur(8px);box-shadow:0 1px 3px rgba(0,0,0,.1);transition:all .3s ease;width:100%}\n        ::-webkit-scrollbar{width:8px;height:8px}\n        ::-webkit-scrollbar-track{background:#f1f1f1}\n        ::-webkit-scrollbar-thumb{background:hsl(232, 61%, 40%);border-radius:4px}\n        ::-webkit-scrollbar-thumb:hover{background:hsl(232, 61%, 30%)}\n        body::before{content:'';position:fixed;top:0;left:0;right:0;height:3px;background:hsl(232, 61%, 40%);transform:scaleX(calc(var(--scroll-progress,0%)/100));transform-origin:left;z-index:1000}\n        @media print{[data-animate]{opacity:1;transform:none}}\n    \n    /* Custom Styles for Animations */\n    [data-animate] {\n      opacity: 0;\n      transition: opacity 0.75s ease-in-out, transform 0.75s ease-in-out;\n    }\n\n    [data-animate=\"slide-left\"] {\n      transform: translateX(50px);\n    }\n\n    [data-animate=\"slide-right\"] {\n      transform: translateX(-50px);\n    }\n\n    [data-animate].animate {\n      opacity: 1;\n      transform: translateX(0);\n    }\n  ","headerStyle":"relative overflow-hidden|background-image: url('https://pixabay.com/get/g7fb2a3e35c633a9708d9c3f621038a7895661d1a7617c8bf8eba3417c619e3ebcf23d75d46fa4ca7b42bcaaa0ac1ce9ccfe2dbbc1892258a82d3ab8d25c4b5c5_640.jpg'); background-size: cover; background-position: center;","originalHtml":"<!DOCTYPE html>\n<html lang=\"en\" class=\"scroll-smooth\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta name=\"description\" content=\"Cyberhunt - Professional website\">\n    <meta name=\"generator\" content=\"Website Generator\">\n    <meta name=\"theme-color\" content=\"hsl(232, 61%, 40%)\">\n    <title>Cyberhunt</title>\n    \n    <script src=\"https://cdn.tailwindcss.com\"></script>\n    \n    <link rel=\"preconnect\" href=\"https://fonts.googleapis.com\">\n    <link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin>\n    <link href='https://fonts.googleapis.com/css2?family=Manrope:wght@300;400;500;600;700&display=swap' rel='stylesheet'>\n    \n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css\">\n    \n    <style>\n        body{font-family:'Manrope', system-ui, sans-serif;overflow-x:hidden;width:100%;max-width:100%;margin:0;padding:0}\n        h1,h2,h3,h4,h5,h6{font-family:'Manrope', sans-serif}\n        section,header,footer{width:100vw;max-width:100%;overflow-x:hidden}\n        header{background-size:cover;background-position:center;background-repeat:no-repeat;position:relative}\n        [data-animate]{opacity:0;transform:translateY(20px);transition:opacity .7s ease-out,transform .7s ease-out}[data-animate].visible{opacity:1;transform:translateY(0)}[data-animate=\"stagger\"]>*{opacity:0;transform:translateY(15px);transition:opacity .5s,transform .5s;transition-delay:calc(var(--child-index,0)*.1s)}[data-animate=\"stagger\"].visible>*{opacity:1;transform:translateY(0)}\n        .nav-fixed{position:fixed;top:0;left:0;right:0;z-index:50;background:rgba(255,255,255,.9);backdrop-filter:blur(8px);box-shadow:0 1px 3px rgba(0,0,0,.1);transition:all .3s ease;width:100%}\n        ::-webkit-scrollbar{width:8px;height:8px}\n        ::-webkit-scrollbar-track{background:#f1f1f1}\n        ::-webkit-scrollbar-thumb{background:hsl(232, 61%, 40%);border-radius:4px}\n        ::-webkit-scrollbar-thumb:hover{background:hsl(232, 61%, 30%)}\n        body::before{content:'';position:fixed;top:0;left:0;right:0;height:3px;background:hsl(232, 61%, 40%);transform:scaleX(calc(var(--scroll-progress,0%)/100));transform-origin:left;z-index:1000}\n        @media print{[data-animate]{opacity:1;transform:none}}\n    </style>\n    \n    <script>\n        tailwind.config={theme:{extend:{colors:{primary:{\"50\":\"hsl(232, 61%, 95%)\",\"100\":\"hsl(232, 61%, 90%)\",\"200\":\"hsl(232, 61%, 80%)\",\"300\":\"hsl(232, 61%, 70%)\",\"400\":\"hsl(232, 61%, 60%)\",\"500\":\"hsl(232, 61%, 50%)\",\"600\":\"hsl(232, 61%, 40%)\",\"700\":\"hsl(232, 61%, 30%)\",\"800\":\"hsl(232, 61%, 20%)\",\"900\":\"hsl(232, 61%, 10%)\"}},fontFamily:{sans:[''Manrope'','system-ui','sans-serif'],heading:[''Manrope'','sans-serif']}}}}\n    </script>\n</head>\n<body class=\"antialiased text-gray-800\">\n    <main>\n        \n<!-- NAV SECTION -->\n\n\n<!-- HEADER SECTION -->\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>Cyberhunt - Blockchain Technology</title>\n  <link href=\"https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css\" rel=\"stylesheet\">\n  <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css\" integrity=\"sha512-9usAa10IRO0HhonpyAIVpjrylPvoDwiPUiKdWk5t3PyolY1cOd4DSE0Ga+ri4AuTroPR5aQvXU9xC6qOPnzFeg==\" crossorigin=\"anonymous\" referrerpolicy=\"no-referrer\" />\n  <style>\n    /* Custom Styles for Animations */\n    [data-animate] {\n      opacity: 0;\n      transition: opacity 0.75s ease-in-out, transform 0.75s ease-in-out;\n    }\n\n    [data-animate=\"slide-left\"] {\n      transform: translateX(50px);\n    }\n\n    [data-animate=\"slide-right\"] {\n      transform: translateX(-50px);\n    }\n\n    [data-animate].animate {\n      opacity: 1;\n      transform: translateX(0);\n    }\n  </style>\n</head>\n<body class=\"bg-gray-900 text-white font-sans\">\n\n  <!-- Header Section -->\n  <header class=\"relative overflow-hidden\" style=\"background-image: url('https://pixabay.com/get/g7fb2a3e35c633a9708d9c3f621038a7895661d1a7617c8bf8eba3417c619e3ebcf23d75d46fa4ca7b42bcaaa0ac1ce9ccfe2dbbc1892258a82d3ab8d25c4b5c5_640.jpg'); background-size: cover; background-position: center;\">\n    <div class=\"absolute inset-0 bg-gradient-to-r from-green-900 to-green-700 opacity-75\"></div>\n    <nav class=\"relative z-10 py-6\">\n      <div class=\"container mx-auto px-6\">\n        <div class=\"flex items-center justify-between\">\n          <div class=\"text-xl font-semibold text-white\">\n            <a href=\"#\" class=\"text-green-400 hover:text-green-200\">Cyberhunt</a>\n          </div>\n          <div class=\"hidden md:flex space-x-6\">\n            <a href=\"#\" class=\"hover:text-green-200\">About</a>\n            <a href=\"#\" class=\"hover:text-green-200\">Services</a>\n            <a href=\"#\" class=\"hover:text-green-200\">Solutions</a>\n            <a href=\"#\" class=\"hover:text-green-200\">Contact</a>\n          </div>\n          <div class=\"md:hidden\">\n            <button id=\"mobile-menu-button\" class=\"text-white focus:outline-none focus:text-green-200\">\n              <svg class=\"h-6 w-6\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\n                <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M4 6h16M4 12h16M4 18h16\"></path>\n              </svg>\n            </button>\n          </div>\n        </div>\n      </div>\n      <!-- Mobile Menu (Hidden by default) -->\n      <div class=\"md:hidden hidden\" id=\"mobile-menu\">\n        <div class=\"px-4 py-2 space-y-2\">\n          <a href=\"#\" class=\"block hover:text-green-200\">About</a>\n          <a href=\"#\" class=\"block hover:text-green-200\">Services</a>\n          <a href=\"#\" class=\"block hover:text-green-200\">Solutions</a>\n          <a href=\"#\" class=\"block hover:text-green-200\">Contact</a>\n        </div>\n      </div>\n    </nav>\n\n    <div class=\"relative z-10 container mx-auto px-6 py-20 md:py-32 lg:py-40\">\n      <div class=\"grid grid-cols-1 md:grid-cols-2 gap-8 items-center\">\n        <div class=\"text-center md:text-left\" data-animate=\"slide-right\">\n          <h1 class=\"text-4xl md:text-5xl lg:text-6xl font-bold text-white mb-4\">\n            Secure Your Future with Blockchain Innovation\n          </h1>\n          <p class=\"text-lg text-gray-300 mb-8\">\n            Cyberhunt provides cutting-edge blockchain solutions for businesses seeking enhanced security, transparency, and efficiency. Explore our innovative services and discover how we can transform your operations.\n          </p>\n          <a href=\"#\" class=\"inline-block bg-green-500 hover:bg-green-700 text-white font-bold py-3 px-6 rounded-lg shadow-md transition duration-300 ease-in-out\">\n            Get Started\n          </a>\n        </div>\n        <div class=\"hidden md:block\" data-animate=\"slide-left\">\n          <img src=\"https://pixabay.com/get/g05e1678e5c1a8b434962fc8a057631029eafabe07af34eac3b1d051cb6f537f67a427d67a52659b615fe85e666ab58e7f7e864baac8619329919adbe17e2a8a3_640.jpg\" alt=\"Blockchain Illustration\" class=\"rounded-xl shadow-lg\">\n        </div>\n      </div>\n    </div>\n  </header>\n\n  <!-- About Section -->\n  <section class=\"py-16 bg-gray-800\" id=\"about\">\n    <div class=\"container mx-auto px-6\">\n      <div class=\"grid grid-cols-1 md:grid-cols-2 gap-8 items-center\">\n        <div data-animate=\"slide-right\">\n          <img src=\"https://pixabay.com/get/g10fda8c7a4aa7cc0385e05d52160ffb313f8586b8d9ce16b3db24f25c7606ed33f8240acf08bdf63089dc227539329eb87f5488f789dfe51993b86596ffab851_640.jpg\" alt=\"About Cyberhunt\" class=\"rounded-xl shadow-lg\">\n        </div>\n        <div data-animate=\"slide-left\">\n          <h2 class=\"text-3xl font-bold text-white mb-4\">About Cyberhunt</h2>\n          <p class=\"text-lg text-gray-300 mb-6\">\n            Cyberhunt is a leading provider of blockchain solutions, specializing in secure and transparent technologies for businesses of all sizes. Our mission is to empower organizations with the tools they need to thrive in the digital age. We offer a range of services, including blockchain development, smart contract auditing, and decentralized application (DApp) development.\n          </p>\n          <p class=\"text-lg text-gray-300\">\n            Our team of experienced blockchain engineers and consultants is dedicated to delivering innovative solutions that meet the unique needs of our clients. We are committed to providing exceptional service and support, ensuring that our clients achieve their goals and maximize the value of their blockchain investments.\n          </p>\n        </div>\n      </div>\n    </div>\n  </section>\n\n  <!-- Services Section -->\n  <section class=\"py-16 bg-gray-900\" id=\"services\">\n    <div class=\"container mx-auto px-6\">\n      <h2 class=\"text-3xl font-bold text-white text-center mb-8\" data-animate=\"slide-down\">Our Services</h2>\n      <div class=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n        <div class=\"bg-gray-800 rounded-xl p-6 shadow-md\" data-animate=\"slide-up\">\n          <i class=\"fas fa-lock text-3xl text-green-500 mb-4\"></i>\n          <h3 class=\"text-xl font-semibold text-white mb-2\">Blockchain Security</h3>\n          <p class=\"text-gray-300\">\n            Protect your data and assets with our advanced blockchain security solutions. We offer comprehensive security audits, vulnerability assessments, and custom security protocols.\n          </p>\n        </div>\n        <div class=\"bg-gray-800 rounded-xl p-6 shadow-md\" data-animate=\"slide-up\">\n          <i class=\"fas fa-file-contract text-3xl text-green-500 mb-4\"></i>\n          <h3 class=\"text-xl font-semibold text-white mb-2\">Smart Contract Development</h3>\n          <p class=\"text-gray-300\">\n            Automate your business processes with our smart contract development services. We create secure, efficient, and reliable smart contracts tailored to your specific needs.\n          </p>\n        </div>\n        <div class=\"bg-gray-800 rounded-xl p-6 shadow-md\" data-animate=\"slide-up\">\n          <i class=\"fas fa-code text-3xl text-green-500 mb-4\"></i>\n          <h3 class=\"text-xl font-semibold text-white mb-2\">DApp Development</h3>\n          <p class=\"text-gray-300\">\n            Build innovative decentralized applications (DApps) with our expert development team. We provide end-to-end DApp development services, from concept to deployment.\n          </p>\n        </div>\n        <div class=\"bg-gray-800 rounded-xl p-6 shadow-md\" data-animate=\"slide-up\">\n          <i class=\"fas fa-coins text-3xl text-green-500 mb-4\"></i>\n          <h3 class=\"text-xl font-semibold text-white mb-2\">Cryptocurrency Solutions</h3>\n          <p class=\"text-gray-300\">\n            Navigate the world of cryptocurrencies with our comprehensive solutions. We offer cryptocurrency wallet development, exchange integration, and custom cryptocurrency development services.\n          </p>\n        </div>\n        <div class=\"bg-gray-800 rounded-xl p-6 shadow-md\" data-animate=\"slide-up\">\n          <i class=\"fas fa-chart-line text-3xl text-green-500 mb-4\"></i>\n          <h3 class=\"text-xl font-semibold text-white mb-2\">Blockchain Consulting</h3>\n          <p class=\"text-gray-300\">\n            Get expert guidance on blockchain implementation with our consulting services. We provide strategic advice, technical expertise, and customized solutions to help you achieve your goals.\n          </p>\n        </div>\n        <div class=\"bg-gray-800 rounded-xl p-6 shadow-md\" data-animate=\"slide-up\">\n          <i class=\"fas fa-network-wired text-3xl text-green-500 mb-4\"></i>\n          <h3 class=\"text-xl font-semibold text-white mb-2\">Blockchain Integration</h3>\n          <p class=\"text-gray-300\">\n            Seamlessly integrate blockchain technology into your existing systems. We offer integration services for various platforms, ensuring smooth and efficient operations.\n          </p>\n        </div>\n      </div>\n    </div>\n  </section>\n\n  <!-- Solutions Section -->\n  <section class=\"py-16 bg-gray-800\" id=\"solutions\">\n    <div class=\"container mx-auto px-6\">\n      <h2 class=\"text-3xl font-bold text-white text-center mb-8\" data-animate=\"slide-down\">Our Solutions</h2>\n      <div class=\"grid grid-cols-1 md:grid-cols-2 gap-8\">\n        <div class=\"bg-gray-900 rounded-xl p-6 shadow-md\" data-animate=\"slide-right\">\n          <h3 class=\"text-xl font-semibold text-white mb-2\">Supply Chain Management</h3>\n          <p class=\"text-gray-300 mb-4\">\n            Enhance transparency and traceability in your supply chain with our blockchain-based solutions. Track products from origin to delivery, ensuring authenticity and reducing fraud.\n          </p>\n          <ul class=\"list-disc list-inside text-gray-300\">\n            <li>Real-time tracking</li>\n            <li>Improved transparency</li>\n            <li>Reduced costs</li>\n            <li>Enhanced security</li>\n          </ul>\n        </div>\n        <div class=\"bg-gray-900 rounded-xl p-6 shadow-md\" data-animate=\"slide-left\">\n          <h3 class=\"text-xl font-semibold text-white mb-2\">Healthcare Data Management</h3>\n          <p class=\"text-gray-300 mb-4\">\n            Securely manage patient data with our blockchain-based healthcare solutions. Ensure privacy, compliance, and interoperability across healthcare providers.\n          </p>\n          <ul class=\"list-disc list-inside text-gray-300\">\n            <li>Secure data storage</li>\n            <li>Improved data sharing</li>\n            <li>Enhanced privacy</li>\n            <li>Regulatory compliance</li>\n          </ul>\n        </div>\n        <div class=\"bg-gray-900 rounded-xl p-6 shadow-md\" data-animate=\"slide-right\">\n          <h3 class=\"text-xl font-semibold text-white mb-2\">Financial Services</h3>\n          <p class=\"text-gray-300 mb-4\">\n            Transform your financial services with our blockchain solutions. Streamline transactions, reduce fraud, and improve efficiency.\n          </p>\n          <ul class=\"list-disc list-inside text-gray-300\">\n            <li>Faster transactions</li>\n            <li>Reduced fraud</li>\n            <li>Improved transparency</li>\n            <li>Lower costs</li>\n          </ul>\n        </div>\n        <div class=\"bg-gray-900 rounded-xl p-6 shadow-md\" data-animate=\"slide-left\">\n          <h3 class=\"text-xl font-semibold text-white mb-2\">Digital Identity Management</h3>\n          <p class=\"text-gray-300 mb-4\">\n            Securely manage digital identities with our blockchain-based solutions. Empower users with control over their personal data and reduce the risk of identity theft.\n          </p>\n          <ul class=\"list-disc list-inside text-gray-300\">\n            <li>Secure identity verification</li>\n            <li>User-controlled data</li>\n            <li>Reduced fraud</li>\n            <li>Improved privacy</li>\n          </ul>\n        </div>\n      </div>\n    </div>\n  </section>\n\n  <!-- Contact Section -->\n  <section class=\"py-16 bg-gray-900\" id=\"contact\">\n    <div class=\"container mx-auto px-6\">\n      <h2 class=\"text-3xl font-bold text-white text-center mb-8\" data-animate=\"slide-down\">Contact Us</h2>\n      <div class=\"grid grid-cols-1 md:grid-cols-2 gap-8\">\n        <div data-animate=\"slide-right\">\n          <p class=\"text-lg text-gray-300 mb-6\">\n            Have questions or want to learn more about our blockchain solutions? Contact us today to schedule a consultation.\n          </p>\n          <ul class=\"text-gray-300\">\n            <li class=\"mb-2\"><i class=\"fas fa-map-marker-alt text-green-500 mr-2\"></i> 123 Main Street, Anytown, CA 12345</li>\n            <li class=\"mb-2\"><i class=\"fas fa-phone text-green-500 mr-2\"></i> (123) 456-7890</li>\n            <li class=\"mb-2\"><i class=\"fas fa-envelope text-green-500 mr-2\"></i> info@cyberhunt.com</li>\n          </ul>\n        </div>\n        <div data-animate=\"slide-left\">\n          <form class=\"space-y-4\">\n            <div>\n              <label for=\"name\" class=\"block text-gray-300 text-sm font-bold mb-2\">Name</label>\n              <input type=\"text\" id=\"name\" class=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline bg-gray-700 text-white\" placeholder=\"Your Name\">\n            </div>\n            <div>\n              <label for=\"email\" class=\"block text-gray-300 text-sm font-bold mb-2\">Email</label>\n              <input type=\"email\" id\n\n<!-- ABOUT SECTION -->\n```html\n<body class=\"bg-gray-900 text-white font-sans\">\n\n    <!-- Header Section -->\n    <header class=\"bg-gradient-to-r from-green-900 to-green-700 py-6 md:py-8 lg:py-10\">\n        <div class=\"container mx-auto px-4\">\n            <div class=\"flex items-center justify-between\">\n                <a href=\"/\" class=\"text-2xl md:text-3xl lg:text-4xl font-bold text-white\">\n                    Cyberhunt\n                </a>\n                <nav class=\"hidden md:flex space-x-6 lg:space-x-8\">\n                    <a href=\"/\" class=\"hover:text-green-300 transition duration-300\">Home</a>\n                    <a href=\"/about\" class=\"hover:text-green-300 transition duration-300\">About</a>\n                    <a href=\"/services\" class=\"hover:text-green-300 transition duration-300\">Services</a>\n                    <a href=\"/solutions\" class=\"hover:text-green-300 transition duration-300\">Solutions</a>\n                    <a href=\"/contact\" class=\"hover:text-green-300 transition duration-300\">Contact</a>\n                </nav>\n                <button class=\"md:hidden text-white focus:outline-none\">\n                    <svg class=\"h-6 w-6\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\"\n                        xmlns=\"http://www.w3.org/2000/svg\">\n                        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\n                            d=\"M4 6h16M4 12h16M4 18h16\"></path>\n                    </svg>\n                </button>\n            </div>\n        </div>\n    </header>\n\n    <!-- About Section -->\n    <section class=\"py-16 md:py-24 lg:py-32 bg-gray-800\">\n        <div class=\"container mx-auto px-4\">\n            <div class=\"grid grid-cols-1 md:grid-cols-2 gap-8 items-center\">\n                <div class=\"md:order-2\" data-animate=\"fade-right\">\n                    <img src=\"https://pixabay.com/get/g05e1678e5c1a8b434962fc8a057631029eafabe07af34eac3b1d051cb6f537f67a427d67a52659b615fe85e666ab58e7f7e864baac8619329919adbe17e2a8a3_640.jpg\"\n                        alt=\"About Cyberhunt\" class=\"rounded-xl shadow-lg\">\n                </div>\n                <div class=\"md:order-1\" data-animate=\"fade-left\">\n                    <h2 class=\"text-3xl md:text-4xl lg:text-5xl font-bold mb-6 text-green-400\">About Cyberhunt</h2>\n                    <p class=\"text-lg leading-relaxed mb-8 text-gray-300\">\n                        At Cyberhunt, we are pioneers in blockchain technology, dedicated to revolutionizing the way\n                        businesses operate in the digital age. Our mission is to provide secure, transparent, and\n                        efficient solutions that empower organizations to thrive in the evolving landscape of Web3.\n                    </p>\n                    <p class=\"text-lg leading-relaxed mb-8 text-gray-300\">\n                        Founded in 2023, Cyberhunt has quickly established itself as a trusted partner for companies\n                        seeking to leverage the power of blockchain. Our team comprises experienced developers,\n                        cryptographers, and business strategists who are passionate about building innovative solutions\n                        that address real-world challenges.\n                    </p>\n                    <p class=\"text-lg leading-relaxed mb-8 text-gray-300\">\n                        We believe in the transformative potential of blockchain to create a more decentralized,\n                        equitable, and secure future. Our commitment to excellence, innovation, and client satisfaction\n                        drives us to deliver cutting-edge solutions that exceed expectations.\n                    </p>\n                </div>\n            </div>\n        </div>\n    </section>\n\n    <!-- Core Values Section -->\n    <section class=\"py-16 md:py-24 lg:py-32 bg-gray-900\">\n        <div class=\"container mx-auto px-4\">\n            <h2 class=\"text-3xl md:text-4xl lg:text-5xl font-bold mb-12 text-center text-green-400\"\n                data-animate=\"fade-down\">Our Core Values</h2>\n            <div class=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n                <div class=\"bg-gray-800 rounded-xl p-6 shadow-md hover:shadow-lg transition duration-300\"\n                    data-animate=\"fade-up\">\n                    <div class=\"flex items-center justify-center h-16 w-16 rounded-full bg-green-700 mb-4\">\n                        <svg class=\"h-8 w-8 text-white\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\"\n                            xmlns=\"http://www.w3.org/2000/svg\">\n                            <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\n                                d=\"M12 6.253v13m0-13C10.832 5.477 9.246 4.75 7.5 4.75a12.742 12.742 0 00-2.553 3.02c-2.836 3.43-2.105 8.167 1.529 10.976C9.077 21.056 12 22.495 12 21.5\"></path>\n                        </svg>\n                    </div>\n                    <h3 class=\"text-xl font-semibold mb-2 text-green-300\">Innovation</h3>\n                    <p class=\"text-gray-300 leading-relaxed\">\n                        We embrace new ideas and technologies to continuously improve our solutions and stay ahead of\n                        the curve.\n                    </p>\n                </div>\n                <div class=\"bg-gray-800 rounded-xl p-6 shadow-md hover:shadow-lg transition duration-300\"\n                    data-animate=\"fade-up\" data-animate-delay=\"200\">\n                    <div class=\"flex items-center justify-center h-16 w-16 rounded-full bg-green-700 mb-4\">\n                        <svg class=\"h-8 w-8 text-white\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\"\n                            xmlns=\"http://www.w3.org/2000/svg\">\n                            <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\n                                d=\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\"></path>\n                        </svg>\n                    </div>\n                    <h3 class=\"text-xl font-semibold mb-2 text-green-300\">Integrity</h3>\n                    <p class=\"text-gray-300 leading-relaxed\">\n                        We conduct our business with honesty, transparency, and ethical principles, building trust with\n                        our clients and partners.\n                    </p>\n                </div>\n                <div class=\"bg-gray-800 rounded-xl p-6 shadow-md hover:shadow-lg transition duration-300\"\n                    data-animate=\"fade-up\" data-animate-delay=\"400\">\n                    <div class=\"flex items-center justify-center h-16 w-16 rounded-full bg-green-700 mb-4\">\n                        <svg class=\"h-8 w-8 text-white\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\"\n                            xmlns=\"http://www.w3.org/2000/svg\">\n                            <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\n                                d=\"M17 14v6m-3-3h6m-6 0a3 3 0 100-6 3 3 0 000 6z\"></path>\n                        </svg>\n                    </div>\n                    <h3 class=\"text-xl font-semibold mb-2 text-green-300\">Collaboration</h3>\n                    <p class=\"text-gray-300 leading-relaxed\">\n                        We foster a collaborative environment where teamwork and open communication drive us to achieve\n                        common goals.\n                    </p>\n                </div>\n            </div>\n        </div>\n    </section>\n\n    <!-- Our Team Section -->\n    <section class=\"py-16 md:py-24 lg:py-32 bg-gray-800\">\n        <div class=\"container mx-auto px-4\">\n            <h2 class=\"text-3xl md:text-4xl lg:text-5xl font-bold mb-12 text-center text-green-400\"\n                data-animate=\"fade-down\">Meet Our Team</h2>\n            <div class=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8\">\n                <div class=\"bg-gray-900 rounded-xl p-4 shadow-md hover:shadow-lg transition duration-300\"\n                    data-animate=\"fade-up\">\n                    <img src=\"/api/placeholder/300/300\" alt=\"John Doe\"\n                        class=\"rounded-full mx-auto mb-4 w-32 h-32 object-cover\">\n                    <h3 class=\"text-xl font-semibold mb-2 text-center text-green-300\">John Doe</h3>\n                    <p class=\"text-gray-300 text-center\">CEO</p>\n                    <p class=\"text-gray-400 text-center mt-2\">\n                        \"Leading Cyberhunt with a vision for a decentralized future.\"\n                    </p>\n                </div>\n                <div class=\"bg-gray-900 rounded-xl p-4 shadow-md hover:shadow-lg transition duration-300\"\n                    data-animate=\"fade-up\" data-animate-delay=\"200\">\n                    <img src=\"/api/placeholder/300/300\" alt=\"Jane Smith\"\n                        class=\"rounded-full mx-auto mb-4 w-32 h-32 object-cover\">\n                    <h3 class=\"text-xl font-semibold mb-2 text-center text-green-300\">Jane Smith</h3>\n                    <p class=\"text-gray-300 text-center\">CTO</p>\n                    <p class=\"text-gray-400 text-center mt-2\">\n                        \"Driving innovation and building secure blockchain solutions.\"\n                    </p>\n                </div>\n                <div class=\"bg-gray-900 rounded-xl p-4 shadow-md hover:shadow-lg transition duration-300\"\n                    data-animate=\"fade-up\" data-animate-delay=\"400\">\n                    <img src=\"/api/placeholder/300/300\" alt=\"David Lee\"\n                        class=\"rounded-full mx-auto mb-4 w-32 h-32 object-cover\">\n                    <h3 class=\"text-xl font-semibold mb-2 text-center text-green-300\">David Lee</h3>\n                    <p class=\"text-gray-300 text-center\">Head of Marketing</p>\n                    <p class=\"text-gray-400 text-center mt-2\">\n                        \"Connecting Cyberhunt with the world and driving adoption.\"\n                    </p>\n                </div>\n                <div class=\"bg-gray-900 rounded-xl p-4 shadow-md hover:shadow-lg transition duration-300\"\n                    data-animate=\"fade-up\" data-animate-delay=\"600\">\n                    <img src=\"/api/placeholder/300/300\" alt=\"Sarah Chen\"\n                        class=\"rounded-full mx-auto mb-4 w-32 h-32 object-cover\">\n                    <h3 class=\"text-xl font-semibold mb-2 text-center text-green-300\">Sarah Chen</h3>\n                    <p class=\"text-gray-300 text-center\">Lead Developer</p>\n                    <p class=\"text-gray-400 text-center mt-2\">\n                        \"Crafting robust and scalable blockchain applications.\"\n                    </p>\n                </div>\n            </div>\n        </div>\n    </section>\n\n    <!-- Testimonials Section -->\n    <section class=\"py-16 md:py-24 lg:py-32 bg-gray-900\">\n        <div class=\"container mx-auto px-4\">\n            <h2 class=\"text-3xl md:text-4xl lg:text-5xl font-bold mb-12 text-center text-green-400\"\n                data-animate=\"fade-down\">What Our Clients Say</h2>\n            <div class=\"grid grid-cols-1 md:grid-cols-2 gap-8\">\n                <div class=\"bg-gray-800 rounded-xl p-6 shadow-md hover:shadow-lg transition duration-300\"\n                    data-animate=\"fade-up\">\n                    <div class=\"flex items-center mb-4\">\n                        <img src=\"/api/placeholder/50/50\" alt=\"Client 1\"\n                            class=\"rounded-full w-12 h-12 object-cover mr-4\">\n                        <div>\n                            <h4 class=\"text-lg font-semibold text-green-300\">Acme Corp</h4>\n                            <p class=\"text-gray-400\">Industry Leader</p>\n                        </div>\n                    </div>\n                    <p class=\"text-gray-300 leading-relaxed italic\">\n                        \"Cyberhunt's blockchain solutions have transformed our supply chain, providing unparalleled\n                        transparency and efficiency. We highly recommend their services.\"\n                    </p>\n                </div>\n                <div class=\"bg-gray-800 rounded-xl p-6 shadow-md hover:shadow-lg transition duration-300\"\n                    data-animate=\"fade-up\" data-animate-delay=\"200\">\n                    <div class=\"flex items-center mb-4\">\n                        <img src=\"/api/placeholder/50/50\" alt=\"Client 2\"\n                            class=\"rounded-full w-12 h-12 object-cover mr-4\">\n                        <div>\n                            <h4 class=\"text-lg font-semibold text-green-300\">Beta Technologies</h4>\n                            <p class=\"text-gray-400\">Innovative Startup</p>\n                        </div>\n                    </div>\n                    <p class=\"text-gray-300 leading-relaxed italic\">\n                        \"Working with Cyberhunt has been a game-changer for our company. Their expertise in blockchain\n                        and their commitment to our success are truly remarkable.\"\n                    </p>\n                </div>\n            </div>\n        </div>\n    </section>\n\n    <!-- Footer Section -->\n    <footer class=\"bg-gray-800 py-12 md:py-16 lg:py-20\">\n        <div class=\"container mx-auto px-4\">\n            <div class=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8\">\n                <div>\n                    <h3 class=\"text-xl font-semibold mb-4 text-green-300\">Cyberhunt</h3>\n                    <p class=\"text-gray-400 leading-relaxed\">\n                        Pioneering blockchain solutions for a secure and transparent future.\n                    </p>\n                    <div class=\"flex space-x-4 mt-4\">\n                        <a href=\"#\" class=\"text-gray-400 hover:text-green-300 transition duration-300\">\n                            <svg class=\"h-6 w-6\" fill=\"currentColor\" viewBox=\"0 0 24 24\" aria-hidden=\"true\">\n                                <path fill-rule=\"evenodd\"\n                                    d=\"M22 12c0-5.523-4.477-10-10-10S2 6.477 2 12c0 4.991 3.663 9.15 8.431 9.806v-7.299H6.924v-2.706h2.507v-1.927c0-2.216.666-3.485 3.593-3.485.981 0 1.951.138 2.216.165v2.451h-1.511c-1.048 0-1.264.807\n\n<!-- SERVICES SECTION -->\n<section id=\"services\" class=\"bg-gray-900 text-white py-20 overflow-hidden\">\n    <div class=\"container mx-auto px-4\">\n        <div class=\"text-center mb-16\" data-animate=\"fade-in\">\n            <h2 class=\"text-4xl font-extrabold text-green-400 mb-4\">Our Blockchain Solutions</h2>\n            <p class=\"text-lg text-gray-300\">Empowering businesses with innovative and secure blockchain technology.</p>\n        </div>\n\n        <div class=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n\n            <!-- Service 1 -->\n            <div class=\"bg-gray-800 rounded-xl shadow-lg overflow-hidden hover:shadow-2xl transition-shadow duration-300\" data-animate=\"slide-in-left\">\n                <div class=\"p-6\">\n                    <div class=\"flex items-center justify-center h-16 w-16 rounded-full bg-green-600 text-white mb-4\">\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke-width=\"1.5\" stroke=\"currentColor\" class=\"w-8 h-8\">\n                            <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M2.25 18L9 11.25l4.5 4.5L21.75 6M2.25 6l18 12M3 2.25h1.5m13.5 0h1.5m-15 0l2.25 2.25M21 2.25l-2.25 2.25M3 19.5h1.5m13.5 0h1.5m-15 0l2.25-2.25M21 19.5l-2.25-2.25\" />\n                        </svg>\n                    </div>\n                    <h3 class=\"text-2xl font-semibold mb-2 text-green-300\">Decentralized Application (DApp) Development</h3>\n                    <p class=\"text-gray-400\">We build secure and scalable DApps tailored to your specific business needs, leveraging the power of blockchain technology.</p>\n                    <ul class=\"list-disc list-inside mt-4 text-sm text-gray-400\">\n                        <li>Smart Contract Development</li>\n                        <li>UI/UX Design</li>\n                        <li>Blockchain Integration</li>\n                        <li>Testing and Auditing</li>\n                    </ul>\n                    <a href=\"#\" class=\"inline-block mt-4 bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded-lg transition-colors duration-200\">Learn More</a>\n                </div>\n            </div>\n\n            <!-- Service 2 -->\n            <div class=\"bg-gray-800 rounded-xl shadow-lg overflow-hidden hover:shadow-2xl transition-shadow duration-300\" data-animate=\"slide-in-up\">\n                <div class=\"p-6\">\n                    <div class=\"flex items-center justify-center h-16 w-16 rounded-full bg-green-600 text-white mb-4\">\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke-width=\"1.5\" stroke=\"currentColor\" class=\"w-8 h-8\">\n                            <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M16.5 10.5V6.75a3 3 0 00-3-3H7.5a3 3 0 00-3 3v10.5a3 3 0 003 3h8.25a3 3 0 003-3v-3.75m-9.375.75h1.5m-1.5 1.5h1.5m-1.5 3h1.5m-3-6h.375m-3 6h.375m-3-6h.375m-3 6h.375\" />\n                        </svg>\n                    </div>\n                    <h3 class=\"text-2xl font-semibold mb-2 text-green-300\">Smart Contract Auditing & Security</h3>\n                    <p class=\"text-gray-400\">Ensure the integrity and security of your smart contracts with our comprehensive auditing services.</p>\n                    <ul class=\"list-disc list-inside mt-4 text-sm text-gray-400\">\n                        <li>Vulnerability Assessment</li>\n                        <li>Code Review</li>\n                        <li>Gas Optimization</li>\n                        <li>Formal Verification</li>\n                    </ul>\n                    <a href=\"#\" class=\"inline-block mt-4 bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded-lg transition-colors duration-200\">Learn More</a>\n                </div>\n            </div>\n\n            <!-- Service 3 -->\n            <div class=\"bg-gray-800 rounded-xl shadow-lg overflow-hidden hover:shadow-2xl transition-shadow duration-300\" data-animate=\"slide-in-right\">\n                <div class=\"p-6\">\n                    <div class=\"flex items-center justify-center h-16 w-16 rounded-full bg-green-600 text-white mb-4\">\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke-width=\"1.5\" stroke=\"currentColor\" class=\"w-8 h-8\">\n                            <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M12 21a9.004 9.004 0 008.716-4.037m-7.328 2.73a11.07 11.07 0 000 3.294m1.311 1.018l-1.07-1.019a11.071 11.071 0 00-3.294 0c.159.403.405.76.78 1.082l1.07 1.019m-1.07-1.019c.548.919 1.164 1.71 1.846 2.372l1.07 1.019m-1.724-1.175l1.724 1.175M4.5 6.364l1.091-1.091M19.5 6.364l-1.091-1.091M4.5 17.636l1.091 1.091M19.5 17.636l-1.091 1.091\" />\n                        </svg>\n\n                    </div>\n                    <h3 class=\"text-2xl font-semibold mb-2 text-green-300\">Blockchain Consulting</h3>\n                    <p class=\"text-gray-400\">Expert guidance on integrating blockchain solutions into your existing business infrastructure.</p>\n                    <ul class=\"list-disc list-inside mt-4 text-sm text-gray-400\">\n                        <li>Strategy Development</li>\n                        <li>Technology Selection</li>\n                        <li>Implementation Planning</li>\n                        <li>Training & Support</li>\n                    </ul>\n                    <a href=\"#\" class=\"inline-block mt-4 bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded-lg transition-colors duration-200\">Learn More</a>\n                </div>\n            </div>\n\n            <!-- Service 4 -->\n            <div class=\"bg-gray-800 rounded-xl shadow-lg overflow-hidden hover:shadow-2xl transition-shadow duration-300 md:col-span-2\" data-animate=\"slide-in-left\">\n                <div class=\"p-6\">\n                    <div class=\"flex items-center justify-center h-16 w-16 rounded-full bg-green-600 text-white mb-4\">\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke-width=\"1.5\" stroke=\"currentColor\" class=\"w-8 h-8\">\n                            <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M9 12.75L11.25 15 15 9.75M21 12a9 9 0 11-18 0 9 9 0 0118 0z\" />\n                        </svg>\n                    </div>\n                    <h3 class=\"text-2xl font-semibold mb-2 text-green-300\">Custom Blockchain Development</h3>\n                    <p class=\"text-gray-400\">Tailored blockchain solutions designed to meet your unique business requirements. From private blockchains to consortium networks, we've got you covered.</p>\n                    <ul class=\"list-disc list-inside mt-4 text-sm text-gray-400\">\n                        <li>Private Blockchain Development</li>\n                        <li>Consortium Blockchain Development</li>\n                        <li>Hybrid Blockchain Development</li>\n                        <li>Tokenization Services</li>\n                    </ul>\n                    <a href=\"#\" class=\"inline-block mt-4 bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded-lg transition-colors duration-200\">Learn More</a>\n                </div>\n            </div>\n\n            <!-- Service 5 -->\n            <div class=\"bg-gray-800 rounded-xl shadow-lg overflow-hidden hover:shadow-2xl transition-shadow duration-300 lg:col-span-1\" data-animate=\"slide-in-right\">\n                <div class=\"p-6\">\n                    <div class=\"flex items-center justify-center h-16 w-16 rounded-full bg-green-600 text-white mb-4\">\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke-width=\"1.5\" stroke=\"currentColor\" class=\"w-8 h-8\">\n                            <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M17.25 6.75L22.5 12l-5.25 5.25m-10.5 0L1.5 12l5.25-5.25m7.5-3l-4.5 16.5\" />\n                        </svg>\n                    </div>\n                    <h3 class=\"text-2xl font-semibold mb-2 text-green-300\">Blockchain Integration</h3>\n                    <p class=\"text-gray-400\">Seamlessly integrate blockchain technology into your existing systems and workflows to improve efficiency and transparency.</p>\n                    <ul class=\"list-disc list-inside mt-4 text-sm text-gray-400\">\n                        <li>API Integration</li>\n                        <li>Legacy System Integration</li>\n                        <li>Data Migration</li>\n                        <li>Workflow Automation</li>\n                    </ul>\n                    <a href=\"#\" class=\"inline-block mt-4 bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded-lg transition-colors duration-200\">Learn More</a>\n                </div>\n            </div>\n\n        </div>\n    </div>\n</section>\n\n<!-- FEATURES SECTION -->\n<section id=\"features\" class=\"bg-green-900 py-16 text-white overflow-hidden\">\n    <div class=\"container mx-auto px-4\">\n        <div class=\"text-center mb-12\" data-animate=\"fade-in\">\n            <h2 class=\"text-4xl font-extrabold mb-4 text-green-400\">Unlocking the Power of Blockchain</h2>\n            <p class=\"text-lg text-green-200\">Cyberhunt empowers businesses and individuals with cutting-edge blockchain solutions. Explore our key features:</p>\n        </div>\n\n        <div class=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\" data-animate=\"slide-in-up\">\n            <!-- Feature 1 -->\n            <div class=\"bg-green-800 rounded-xl shadow-lg p-6 hover:scale-105 transition-transform duration-300\">\n                <div class=\"flex items-center mb-4\">\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke-width=\"1.5\" stroke=\"currentColor\" class=\"w-8 h-8 text-green-400 mr-3\">\n                        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M16.5 10.5V6.75a3 3 0 00-3-3H7.5a3 3 0 00-3 3v10.5a3 3 0 003 3h8.25a3 3 0 003-3v-3.75m-9.375.75h1.5m-1.5 1.5h1.5m-1.5 1.5h1.5m6-1.5H18a3 3 0 003-3V6.75a3 3 0 00-3-3H9.75a3 3 0 00-3 3v10.5a3 3 0 003 3h2.25m-5.625-3h1.5m-1.5 1.5h1.5\" />\n                    </svg>\n                    <h3 class=\"text-xl font-semibold text-green-300\">Secure Transactions</h3>\n                </div>\n                <p class=\"text-green-100\">Leverage our secure blockchain infrastructure for tamper-proof and transparent transactions.  Eliminate fraud and build trust with every interaction.</p>\n            </div>\n\n            <!-- Feature 2 -->\n            <div class=\"bg-green-800 rounded-xl shadow-lg p-6 hover:scale-105 transition-transform duration-300\">\n                <div class=\"flex items-center mb-4\">\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke-width=\"1.5\" stroke=\"currentColor\" class=\"w-8 h-8 text-green-400 mr-3\">\n                        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M3 13.125C3 12.504 3.621 11.875 4.242 11.875h15.516c.621 0 1.242.629 1.242 1.25v2.25c0 .629-.621 1.25-1.242 1.25H4.242a1.25 1.25 0 01-1.242-1.25v-2.25zM3 5.625C3 5.004 3.621 4.375 4.242 4.375h15.516c.621 0 1.242.629 1.242 1.25v2.25c0 .629-.621 1.25-1.242 1.25H4.242a1.25 1.25 0 01-1.242-1.25v-2.25zM3 20.625C3 20.004 3.621 19.375 4.242 19.375h15.516c.621 0 1.242.629 1.242 1.25v2.25c0 .629-.621 1.25-1.242 1.25H4.242a1.25 1.25 0 01-1.242-1.25v-2.25z\" />\n                    </svg>\n\n                    <h3 class=\"text-xl font-semibold text-green-300\">Smart Contracts</h3>\n                </div>\n                <p class=\"text-green-100\">Automate agreements and streamline processes with our customizable smart contract solutions.  Reduce costs and increase efficiency with self-executing contracts.</p>\n            </div>\n\n            <!-- Feature 3 -->\n            <div class=\"bg-green-800 rounded-xl shadow-lg p-6 hover:scale-105 transition-transform duration-300\">\n                <div class=\"flex items-center mb-4\">\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke-width=\"1.5\" stroke=\"currentColor\" class=\"w-8 h-8 text-green-400 mr-3\">\n                        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M9 12.75L11.25 15 15 9.75M21 12a9 9 0 11-18 0 9 9 0 0118 0z\" />\n                    </svg>\n                    <h3 class=\"text-xl font-semibold text-green-300\">Decentralized Applications (dApps)</h3>\n                </div>\n                <p class=\"text-green-100\">Build and deploy decentralized applications on our robust blockchain platform. Create innovative solutions for finance, supply chain, and more.</p>\n            </div>\n\n            <!-- Feature 4 -->\n            <div class=\"bg-green-800 rounded-xl shadow-lg p-6 hover:scale-105 transition-transform duration-300\">\n                <div class=\"flex items-center mb-4\">\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke-width=\"1.5\" stroke=\"currentColor\" class=\"w-8 h-8 text-green-400 mr-3\">\n                        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M2.25 12l8.954-8.955c.44-.439 1.152-.439 1.591 0L21.75 12M4.5 9.75v10.125c0 .621.504 1.125 1.125 1.125H9.75v-4.875c0-.621.504-1.125 1.125-1.125h2.25c.621 0 1.125.504 1.125 1.125V21h4.125c.621 0 1.125-.504 1.125-1.125V9.75M8.25 21h8.25\" />\n                    </svg>\n                    <h3 class=\"text-xl font-semibold text-green-300\">Supply Chain Management</h3>\n                </div>\n                <p class=\"text-green-100\">Track and trace goods throughout your supply chain with our blockchain-based solution.  Improve transparency, reduce counterfeiting, and enhance efficiency.</p>\n            </div>\n\n            <!-- Feature 5 -->\n            <div class=\"bg-green-800 rounded-xl shadow-lg p-6 hover:scale-105 transition-transform duration-300\">\n                <div class=\"flex items-center mb-4\">\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke-width=\"1.5\" stroke=\"currentColor\" class=\"w-8 h-8 text-green-400 mr-3\">\n                        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M12 21a9.004 9.004 0 008.716-4.037m-7.328 4.037a25.752 25.752 0 01-5.44-4.037m3.982 4.037a50.751 50.751 0 01-2.424-3.422m2.71.342v7.696a2.05 2.05 0 01-2.05 2.05H5.25a2.05 2.05 0 01-2.05-2.05V11.21a2.05 2.05 0 012.05-2.05h5.652a2.05 2.05 0 012.05 2.05v1.421\" />\n                        <path d=\"M16 18a4 4 0 11-8 0 4 4 0 018 0z\" />\n                    </svg>\n\n                    <h3 class=\"text-xl font-semibold text-green-300\">Digital Identity</h3>\n                </div>\n                <p class=\"text-green-100\">Empower users with secure and verifiable digital identities.  Streamline onboarding processes and enhance data privacy with blockchain-based identity management.</p>\n            </div>\n\n            <!-- Feature 6 -->\n            <div class=\"bg-green-800 rounded-xl shadow-lg p-6 hover:scale-105 transition-transform duration-300\">\n                <div class=\"flex items-center mb-4\">\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke-width=\"1.5\" stroke=\"currentColor\" class=\"w-8 h-8 text-green-400 mr-3\">\n                        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M10.5 6a7.5 7.5 0 107.5 7.5h-7.5V6z\" />\n                        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M13.5 10.5H21A7.5 7.5 0 0013.5 3v7.5z\" />\n                    </svg>\n\n                    <h3 class=\"text-xl font-semibold text-green-300\">Tokenization</h3>\n                </div>\n                <p class=\"text-green-100\">Unlock new funding opportunities and fractionalize assets with our tokenization platform.  Create and manage digital tokens for your business or project.</p>\n            </div>\n        </div>\n    </div>\n</section>\n\n    </main>\n    \n    <script>\n        document.addEventListener('DOMContentLoaded',function(){\n            // Animation system\n            const observer=new IntersectionObserver(entries=>{\n                entries.forEach((entry,i)=>{\n                    if(entry.isIntersecting){\n                        setTimeout(()=>{\n                            entry.target.classList.add('visible');\n                            // Handle staggered children if using that animation style\n                            if(entry.target.getAttribute('data-animate')==='stagger'){\n                                Array.from(entry.target.children).forEach((child,childIndex)=>{\n                                    child.style.setProperty('--child-index',childIndex);\n                                });\n                            }\n                        },i*100);\n                        observer.unobserve(entry.target);\n                    }\n                });\n            },{threshold:0.15,rootMargin:'0px 0px -100px 0px'});\n            \n            document.querySelectorAll('[data-animate]').forEach(el=>observer.observe(el));\n            \n            // Fixed navigation\n            const nav=document.querySelector('nav');\n            if(nav){\n                const handleScroll=()=>{\n                    nav.classList[window.scrollY>100?'add':'remove']('nav-fixed');\n                };\n                window.addEventListener('scroll',handleScroll,{passive:true});\n                handleScroll();\n            }\n            \n            // Smooth scroll\n            document.querySelectorAll('a[href^=\"#\"]').forEach(anchor=>{\n                anchor.addEventListener('click',function(e){\n                    e.preventDefault();\n                    const targetId=this.getAttribute('href');\n                    if(targetId==='#')return;\n                    const target=document.querySelector(targetId);\n                    if(target){\n                        const targetPosition=target.getBoundingClientRect().top+window.pageYOffset-(nav?nav.offsetHeight:0)-20;\n                        window.scrollTo({top:targetPosition,behavior:'smooth'});\n                    }\n                });\n            });\n            \n            // Scroll progress indicator\n            const height=Math.max(\n                document.body.scrollHeight,\n                document.body.offsetHeight,\n                document.documentElement.clientHeight,\n                document.documentElement.scrollHeight,\n                document.documentElement.offsetHeight\n            )-window.innerHeight;\n            \n            window.addEventListener('scroll',()=>{\n                document.documentElement.style.setProperty('--scroll-progress',(window.scrollY/height*100)+'%');\n            },{passive:true});\n            \n            // Mobile menu\n            const menuToggle=document.getElementById('mobile-menu-toggle');\n            const mobileMenu=document.getElementById('mobile-menu');\n            if(menuToggle&&mobileMenu){\n                menuToggle.addEventListener('click',()=>{\n                    mobileMenu.classList.toggle('hidden');\n                    document.body.classList.toggle('overflow-hidden');\n                });\n                document.addEventListener('click',e=>{\n                    if(mobileMenu&&!mobileMenu.classList.contains('hidden')&&\n                        menuToggle&&!menuToggle.contains(e.target)&&!mobileMenu.contains(e.target)){\n                        mobileMenu.classList.add('hidden');\n                        document.body.classList.remove('overflow-hidden');\n                    }\n                });\n            }\n            \n            // Accordions\n            document.querySelectorAll('[data-accordion-target]').forEach(btn=>{\n                btn.addEventListener('click',()=>{\n                    const target=document.querySelector(btn.getAttribute('data-accordion-target'));\n                    if(target){\n                        const isExpanded=btn.getAttribute('aria-expanded')==='true';\n                        target.classList.toggle('hidden');\n                        btn.setAttribute('aria-expanded',isExpanded?'false':'true');\n                        const icon=btn.querySelector('.accordion-icon');\n                        if(icon)icon.classList.toggle('rotate-180');\n                    }\n                });\n            });\n            \n            // Form validation (optional enhancement)\n            document.querySelectorAll('form').forEach(form=>{\n                form.addEventListener('submit',function(e){\n                    let valid=true;\n                    const requiredFields=form.querySelectorAll('[required]');\n                    \n                    requiredFields.forEach(field=>{\n                        if(!field.value.trim()){\n                            valid=false;\n                            field.classList.add('border-red-500');\n                            \n                            // Add error message if not already present\n                            let errorMsg=field.parentNode.querySelector('.error-message');\n                            if(!errorMsg){\n                                errorMsg=document.createElement('p');\n                                errorMsg.className='text-red-500 text-sm mt-1 error-message';\n                                errorMsg.textContent='This field is required';\n                                field.parentNode.appendChild(errorMsg);\n                            }\n                        }else{\n                            field.classList.remove('border-red-500');\n                            const errorMsg=field.parentNode.querySelector('.error-message');\n                            if(errorMsg)errorMsg.remove();\n                        }\n                    });\n                    \n                    if(!valid){\n                        e.preventDefault();\n                    }\n                });\n            });\n            \n            // Tabs functionality if present\n            document.querySelectorAll('[data-tabs]').forEach(tabGroup=>{\n                const tabs=tabGroup.querySelectorAll('[data-tab]');\n                const tabContents=document.querySelectorAll('[data-tab-content]');\n                \n                tabs.forEach(tab=>{\n                    tab.addEventListener('click',()=>{\n                        const target=tab.getAttribute('data-tab');\n                        \n                        // Update active tab state\n                        tabs.forEach(t=>t.classList.remove('active-tab','text-primary-600','border-primary-600'));\n                        tab.classList.add('active-tab','text-primary-600','border-primary-600');\n                        \n                        // Show correct content\n                        tabContents.forEach(content=>{\n                            if(content.getAttribute('data-tab-content')===target){\n                                content.classList.remove('hidden');\n                            }else{\n                                content.classList.add('hidden');\n                            }\n                        });\n                    });\n                });\n            });\n            \n            // Carousels\n            document.querySelectorAll('[data-carousel]').forEach(carousel=>{\n                const slides=carousel.querySelectorAll('[data-slide]');\n                const prevBtn=carousel.querySelector('[data-carousel-prev]');\n                const nextBtn=carousel.querySelector('[data-carousel-next]');\n                \n                if(slides.length>0&&prevBtn&&nextBtn){\n                    let current=0,interval=null;\n                    \n                    slides[0].classList.remove('hidden');\n                    \n                    const updateIndicators=()=>{\n                        carousel.querySelectorAll('[data-indicator]').forEach((ind,i)=>{\n                            ind.classList[i===current?'add':'remove']('bg-primary-600');\n                            ind.classList[i!==current?'add':'remove']('bg-gray-300');\n                        });\n                    };\n                    \n                    const showSlide=idx=>{\n                        slides.forEach(s=>s.classList.add('hidden'));\n                        slides[idx].classList.remove('hidden');\n                        updateIndicators();\n                    };\n                    \n                    nextBtn.addEventListener('click',()=>{\n                        current=(current+1)%slides.length;\n                        showSlide(current);\n                    });\n                    \n                    prevBtn.addEventListener('click',()=>{\n                        current=(current-1+slides.length)%slides.length;\n                        showSlide(current);\n                    });\n                    \n                    updateIndicators();\n                    \n                    const startAuto=()=>{\n                        if(carousel.hasAttribute('data-auto')&&!interval){\n                            interval=setInterval(()=>{\n                                current=(current+1)%slides.length;\n                                showSlide(current);\n                            },5000);\n                        }\n                    };\n                    \n                    carousel.addEventListener('mouseenter',()=>{\n                        if(interval){clearInterval(interval);interval=null;}\n                    });\n                    \n                    carousel.addEventListener('mouseleave',startAuto);\n                    \n                    carousel.querySelectorAll('[data-indicator]').forEach((ind,i)=>{\n                        ind.addEventListener('click',()=>{\n                            current=i;\n                            showSlide(current);\n                        });\n                    });\n                    \n                    startAuto();\n                }\n            });\n            \n            // Initialize counters for stats sections if they exist\n            document.querySelectorAll('[data-counter]').forEach(counter=>{\n                const target=parseInt(counter.getAttribute('data-counter')||'0',10);\n                const duration=1500; // Animation duration in ms\n                const step=Math.ceil(target/50); // How much to increment per step\n                let current=0;\n                \n                const updateCounter=()=>{\n                    current+=step;\n                    if(current>target)current=target;\n                    \n                    counter.textContent=current.toString().replace(/B(?=(d{3})+(?!d))/g,',');\n                    \n                    if(current<target){\n                        requestAnimationFrame(updateCounter);\n                    }\n                };\n                \n                // Start counting when element is in view\n                const observer=new IntersectionObserver(entries=>{\n                    entries.forEach(entry=>{\n                        if(entry.isIntersecting){\n                            updateCounter();\n                            observer.unobserve(entry.target);\n                        }\n                    });\n                },{threshold:0.5});\n                \n                observer.observe(counter);\n            });\n        });\n    </script>\n</body>\n</html>"}